#!/usr/bin/env python3
"""
üß™ Test de v√©rification des modules Enhanced
===========================================
"""

import sys
import torch
from pathlib import Path

def test_enhanced_import():
    """Test d'import des modules enhanced"""
    
    print("üß™ TEST D'IMPORT DES MODULES ENHANCED")
    print("=" * 45)
    
    try:
        # Test import direct
        from ultralytics.nn.modules.enhanced import A2Module, RELAN
        print("‚úÖ Import direct r√©ussi: A2Module, RELAN")
        
        # Test import via ultralytics.nn.modules
        from ultralytics.nn.modules import A2Module as A2_alt, RELAN as RELAN_alt
        print("‚úÖ Import via modules r√©ussi")
        
        # Test instanciation
        a2 = A2Module(64, 64)
        relan = RELAN(128, 128)
        print("‚úÖ Instanciation r√©ussie")
        
        # Test forward pass
        x1 = torch.randn(1, 64, 32, 32)
        x2 = torch.randn(1, 128, 16, 16)
        
        out1 = a2(x1)
        out2 = relan(x2)
        
        print(f"‚úÖ A2Module: {x1.shape} -> {out1.shape}")
        print(f"‚úÖ RELAN: {x2.shape} -> {out2.shape}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur de test: {e}")
        return False

def test_model_creation():
    """Test de cr√©ation du mod√®le Enhanced"""
    
    print(f"\nüèóÔ∏è TEST DE CR√âATION DU MOD√àLE")
    print("=" * 35)
    
    try:
        from ultralytics import YOLO
        
        # V√©rifier que le fichier config existe
        config_path = Path('ultralytics/cfg/models/v12/yolov12-face-enhanced.yaml')
        if not config_path.exists():
            print(f"‚ùå Fichier config non trouv√©: {config_path}")
            return False
        
        print(f"‚úÖ Fichier config trouv√©: {config_path}")
        
        # Cr√©er le mod√®le
        model = YOLO(str(config_path))
        print("‚úÖ Mod√®le Enhanced cr√©√© avec succ√®s")
        
        # Tester une pr√©diction factice
        dummy_input = torch.randn(1, 3, 640, 640)
        with torch.no_grad():
            output = model.model(dummy_input)
        print(f"‚úÖ Test forward pass: input {dummy_input.shape}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur de cr√©ation mod√®le: {e}")
        return False

def test_diagnostics():
    """Diagnostics d√©taill√©s"""
    
    print(f"\nüîç DIAGNOSTICS D√âTAILL√âS")
    print("=" * 30)
    
    # V√©rifier les fichiers
    files_to_check = [
        'ultralytics/nn/modules/enhanced.py',
        'ultralytics/nn/modules/__init__.py',
        'ultralytics/cfg/models/v12/yolov12-face-enhanced.yaml'
    ]
    
    for file_path in files_to_check:
        path = Path(file_path)
        if path.exists():
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} MANQUANT")
    
    # V√©rifier le contenu de __init__.py
    init_file = Path('ultralytics/nn/modules/__init__.py')
    if init_file.exists():
        with open(init_file, 'r') as f:
            content = f.read()
        
        if 'from .enhanced import *' in content:
            print("‚úÖ Import enhanced dans __init__.py")
        else:
            print("‚ùå Import enhanced MANQUANT dans __init__.py")
        
        enhanced_modules = ['A2Module', 'RELAN']
        for module in enhanced_modules:
            if module in content:
                print(f"‚úÖ {module} dans __all__")
            else:
                print(f"‚ùå {module} MANQUANT dans __all__")

def main():
    """Fonction principale de test"""
    
    print("üöÄ YOLOv12-Face Enhanced - Tests de V√©rification\n")
    
    # Tests
    import_ok = test_enhanced_import()
    model_ok = test_model_creation()
    test_diagnostics()
    
    # R√©sum√©
    print(f"\nüìä R√âSUM√â DES TESTS")
    print("=" * 25)
    print(f"Import modules: {'‚úÖ' if import_ok else '‚ùå'}")
    print(f"Cr√©ation mod√®le: {'‚úÖ' if model_ok else '‚ùå'}")
    
    if import_ok and model_ok:
        print("\nüéâ TOUS LES TESTS PASSENT !")
        print("Le syst√®me Enhanced est pr√™t √† l'emploi.")
        return True
    else:
        print("\n‚ùå CERTAINS TESTS √âCHOUENT")
        print("V√©rifiez les erreurs ci-dessus.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
